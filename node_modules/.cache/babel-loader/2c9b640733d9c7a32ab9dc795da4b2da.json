{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\neeth\\\\Documents\\\\GitHub\\\\NUSAssist\\\\NUSAssist\\\\src\\\\hooks\\\\useAuth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { config as firebaseConfig } from \"../config/firebaseConfig.js\"; // Code edited from https://usehooks.com/useAuth/ and\n// https://firebase.google.com/docs/auth/web/start#add-initialize-sdk\n// Not my original work.\n// Initialize Firebase\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = initializeApp(firebaseConfig);\nconsole.log(firebaseConfig); // Initialize Firebase Authentication and get a reference to the service\n\nconst firebaseAuth = getAuth(app);\nconst authContext = /*#__PURE__*/createContext();\nconst provider = new GoogleAuthProvider(); // Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\n\nexport function ProvideAuth(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const auth = useProvideAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\n_s(ProvideAuth, \"XNU4Jn8u4aVzJknlKOHFJq03xMo=\", false, function () {\n  return [useProvideAuth];\n});\n\n_c = ProvideAuth;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useProvideAuth() {\n  _s3();\n\n  const [user, setUser] = useState(null); // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n\n  const signin = (email, password) => {\n    return firebaseAuth.signInWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  const signup = (email, password) => {\n    return firebaseAuth.createUserWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  const signout = () => {\n    return firebaseAuth.signOut().then(() => {\n      setUser(false);\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    return firebaseAuth.sendPasswordResetEmail(email).then(() => {\n      return true;\n    });\n  };\n\n  const confirmPasswordReset = (code, password) => {\n    return firebaseAuth.confirmPasswordReset(code, password).then(() => {\n      return true;\n    });\n  };\n\n  const signInWithGoogle = () => {\n    return signInWithPopup(firebaseAuth, provider);\n  }; // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n\n\n  useEffect(() => {\n    const unsubscribe = firebaseAuth.onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    }); // Cleanup subscription on unmount\n\n    return () => unsubscribe();\n  }, []); // Return the user object and auth methods\n\n  return {\n    user,\n    signin,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    signInWithGoogle\n  };\n}\n\n_s3(useProvideAuth, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvideAuth\");","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","React","useState","useEffect","useContext","createContext","config","firebaseConfig","app","console","log","firebaseAuth","authContext","provider","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","signin","email","password","signInWithEmailAndPassword","then","response","signup","createUserWithEmailAndPassword","signout","signOut","sendPasswordResetEmail","confirmPasswordReset","code","signInWithGoogle","unsubscribe","onAuthStateChanged"],"sources":["C:/Users/neeth/Documents/GitHub/NUSAssist/NUSAssist/src/hooks/useAuth.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport { config as firebaseConfig } from \"../config/firebaseConfig.js\";\r\n\r\n// Code edited from https://usehooks.com/useAuth/ and\r\n// https://firebase.google.com/docs/auth/web/start#add-initialize-sdk\r\n// Not my original work.\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconsole.log(firebaseConfig);\r\n\r\n// Initialize Firebase Authentication and get a reference to the service\r\nconst firebaseAuth = getAuth(app);\r\n\r\nconst authContext = createContext();\r\nconst provider = new GoogleAuthProvider();\r\n\r\n\r\n// Provider component that wraps your app and makes auth object ...\r\n// ... available to any child component that calls useAuth().\r\nexport function ProvideAuth({ children }) {\r\n  const auth = useProvideAuth();\r\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\r\n}\r\n\r\n// Hook for child components to get the auth object ...\r\n// ... and re-render when it changes.\r\nexport const useAuth = () => {\r\n  return useContext(authContext);\r\n};\r\n\r\n// Provider hook that creates auth object and handles state\r\nfunction useProvideAuth() {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Wrap any Firebase methods we want to use making sure ...\r\n  // ... to save the user to state.\r\n  const signin = (email, password) => {\r\n    return firebaseAuth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((response) => {\r\n        setUser(response.user);\r\n        return response.user;\r\n      });\r\n  };\r\n\r\n  const signup = (email, password) => {\r\n    return firebaseAuth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((response) => {\r\n        setUser(response.user);\r\n        return response.user;\r\n      });\r\n  };\r\n\r\n  const signout = () => {\r\n    return firebaseAuth.signOut().then(() => {\r\n      setUser(false);\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetEmail = (email) => {\r\n    return firebaseAuth.sendPasswordResetEmail(email).then(() => {\r\n      return true;\r\n    });\r\n  };\r\n\r\n  const confirmPasswordReset = (code, password) => {\r\n    return firebaseAuth.confirmPasswordReset(code, password).then(() => {\r\n      return true;\r\n    });\r\n  };\r\n\r\n  const signInWithGoogle = () => {\r\n    return signInWithPopup(firebaseAuth, provider);\r\n  };\r\n\r\n  // Subscribe to user on mount\r\n  // Because this sets state in the callback it will cause any ...\r\n  // ... component that utilizes this hook to re-render with the ...\r\n  // ... latest auth object.\r\n  useEffect(() => {\r\n    const unsubscribe = firebaseAuth.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        setUser(user);\r\n      } else {\r\n        setUser(false);\r\n      }\r\n    });\r\n\r\n    // Cleanup subscription on unmount\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Return the user object and auth methods\r\n  return {\r\n    user,\r\n    signin,\r\n    signup,\r\n    signout,\r\n    sendPasswordResetEmail,\r\n    confirmPasswordReset,\r\n    signInWithGoogle\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}