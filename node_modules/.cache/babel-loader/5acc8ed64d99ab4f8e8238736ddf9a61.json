{"ast":null,"code":"import update from 'immutability-helper';\n/**\r\n * Get the list of todo items.\r\n * @return {Array}\r\n */\n\nexport function getAll() {\n  return [{\n    id: 1,\n    text: 'New task here',\n    completed: false\n  }];\n}\nexport function getItemById(itemId) {\n  return getAll().find(item => item.id === itemId);\n}\nexport function updateStatus(items, itemId, completed) {\n  let index = items.findIndex(item => item.id === itemId); // Returns a new list of data with updated item.\n\n  return update(items, {\n    [index]: {\n      completed: {\n        $set: completed\n      }\n    }\n  });\n}\n/**\r\n * A counter to generate a unique id for a todo item.\r\n * Can remove this logic when the todo is created using backend/database logic.\r\n * @type {Number}\r\n */\n\nlet todoCounter = 1;\n\nfunction getNextId() {\n  return getAll().length + todoCounter++;\n}\n/**\r\n * Adds a new item on the list and returns the new updated list (immutable).\r\n *\r\n * @param {Array} list\r\n * @param {Object} data\r\n * @return {Array}\r\n */\n\n\nexport function addToList(list, data) {\n  let item = Object.assign({\n    id: getNextId()\n  }, data);\n  return list.concat([item]);\n}","map":{"version":3,"names":["update","getAll","id","text","completed","getItemById","itemId","find","item","updateStatus","items","index","findIndex","$set","todoCounter","getNextId","length","addToList","list","data","Object","assign","concat"],"sources":["C:/Users/neeth/Documents/GitHub/NUSAssist/NUSAssist/src/components/task-manager/services/todo.js"],"sourcesContent":["import update from 'immutability-helper';\r\n\r\n/**\r\n * Get the list of todo items.\r\n * @return {Array}\r\n */\r\nexport function getAll() {\r\n    return [\r\n        {\r\n            id: 1,\r\n            text: 'New task here',\r\n            completed: false\r\n        }\r\n    ]\r\n}\r\n\r\nexport function getItemById(itemId) {\r\n    return getAll().find(item => item.id === itemId);\r\n}\r\n\r\nexport function updateStatus(items, itemId, completed) {\r\n    let index = items.findIndex(item => item.id === itemId);\r\n\r\n    // Returns a new list of data with updated item.\r\n    return update(items, {\r\n        [index]: {\r\n            completed: {$set: completed}\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * A counter to generate a unique id for a todo item.\r\n * Can remove this logic when the todo is created using backend/database logic.\r\n * @type {Number}\r\n */\r\nlet todoCounter = 1;\r\n\r\nfunction getNextId() {\r\n    return getAll().length + todoCounter++;\r\n}\r\n\r\n/**\r\n * Adds a new item on the list and returns the new updated list (immutable).\r\n *\r\n * @param {Array} list\r\n * @param {Object} data\r\n * @return {Array}\r\n */\r\nexport function addToList(list, data) {\r\n    let item = Object.assign({\r\n        id: getNextId()\r\n    }, data);\r\n\r\n    return list.concat([item]);\r\n}\r\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,GAAkB;EACrB,OAAO,CACH;IACIC,EAAE,EAAE,CADR;IAEIC,IAAI,EAAE,eAFV;IAGIC,SAAS,EAAE;EAHf,CADG,CAAP;AAOH;AAED,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;EAChC,OAAOL,MAAM,GAAGM,IAAT,CAAcC,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAYI,MAAlC,CAAP;AACH;AAED,OAAO,SAASG,YAAT,CAAsBC,KAAtB,EAA6BJ,MAA7B,EAAqCF,SAArC,EAAgD;EACnD,IAAIO,KAAK,GAAGD,KAAK,CAACE,SAAN,CAAgBJ,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAYI,MAApC,CAAZ,CADmD,CAGnD;;EACA,OAAON,MAAM,CAACU,KAAD,EAAQ;IACjB,CAACC,KAAD,GAAS;MACLP,SAAS,EAAE;QAACS,IAAI,EAAET;MAAP;IADN;EADQ,CAAR,CAAb;AAKH;AAED;AACA;AACA;AACA;AACA;;AACA,IAAIU,WAAW,GAAG,CAAlB;;AAEA,SAASC,SAAT,GAAqB;EACjB,OAAOd,MAAM,GAAGe,MAAT,GAAkBF,WAAW,EAApC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASG,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;EAClC,IAAIX,IAAI,GAAGY,MAAM,CAACC,MAAP,CAAc;IACrBnB,EAAE,EAAEa,SAAS;EADQ,CAAd,EAERI,IAFQ,CAAX;EAIA,OAAOD,IAAI,CAACI,MAAL,CAAY,CAACd,IAAD,CAAZ,CAAP;AACH"},"metadata":{},"sourceType":"module"}